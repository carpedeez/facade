// Package facade provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.2.2 DO NOT EDIT.
package facade

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetDisplay defines model for GetDisplay.
type GetDisplay struct {
	Description string  `json:"description"`
	ID          int64   `json:"id"`
	ItemIDS     []int64 `json:"itemIDs"`
	PhotoURL    string  `json:"photoURL"`
	Title       string  `json:"title"`
	Username    string  `json:"username"`
}

// GetItem defines model for GetItem.
type GetItem struct {
	DisplayID      int64  `json:"displayID"`
	ExternalLink   string `json:"externalLink"`
	ID             int64  `json:"id"`
	PhotoURL       string `json:"photoURL"`
	SocialPostLink string `json:"socialPostLink"`
	Username       string `json:"username"`
}

// GetUser defines model for GetUser.
type GetUser struct {
	DisplayIDS  []int64  `json:"displayIDs"`
	FirstName   string   `json:"firstName"`
	ID          int64    `json:"id"`
	LastName    string   `json:"lastName"`
	PhotoURL    string   `json:"photoURL"`
	SocialLinks []string `json:"socialLinks"`
	Username    string   `json:"username"`
}

// PatchDisplay defines model for PatchDisplay.
type PatchDisplay struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// PatchItem defines model for PatchItem.
type PatchItem struct {
	ExternalLink   *string `json:"externalLink,omitempty"`
	PhotoURL       *string `json:"photoURL,omitempty"`
	SocialPostLink *string `json:"socialPostLink,omitempty"`
}

// PatchUser defines model for PatchUser.
type PatchUser struct {
	FirstName   *string  `json:"firstName,omitempty"`
	LastName    *string  `json:"lastName,omitempty"`
	SocialLinks []string `json:"socialLinks,omitempty"`
	Username    *string  `json:"username,omitempty"`
}

// PostDisplay defines model for PostDisplay.
type PostDisplay struct {
	Description string `json:"description"`
	Title       string `json:"title"`
}

// PostItem defines model for PostItem.
type PostItem struct {
	ExternalLink   string `json:"externalLink"`
	SocialPostLink string `json:"socialPostLink"`
}

// registration
type PostUser struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Username  string `json:"username"`
}

// Session defines model for Session.
type Session struct {
	Active                bool   `json:"active"`
	AuthenticatedAt       string `json:"authenticated_at"`
	AuthenticationMethods []struct {
		CompletedAt string `json:"completed_at"`
		Method      string `json:"method"`
	} `json:"authentication_methods"`
	AuthenticatorAssuranceLevel string `json:"authenticator_assurance_level"`
	ExpiresAt                   string `json:"expires_at"`
	ID                          string `json:"id"`
	Identity                    struct {
		CreatedAt         string `json:"created_at"`
		ID                string `json:"id"`
		RecoveryAddresses []struct {
			CreatedAt string `json:"created_at"`
			ID        string `json:"id"`
			UpdatedAt string `json:"updated_at"`
			Value     string `json:"value"`
			Via       string `json:"via"`
		} `json:"recovery_addresses"`
		SchemaID       string `json:"schema_id"`
		SchemaURL      string `json:"schema_url"`
		State          string `json:"state"`
		StateChangedAt string `json:"state_changed_at"`
		Traits         struct {
			Email   string `json:"email"`
			Website string `json:"website"`
		} `json:"traits"`
		UpdatedAt           string `json:"updated_at"`
		VerifiableAddresses []struct {
			CreatedAt string `json:"created_at"`
			ID        string `json:"id"`
			Status    string `json:"status"`
			UpdatedAt string `json:"updated_at"`
			Value     string `json:"value"`
			Verified  bool   `json:"verified"`
			Via       string `json:"via"`
		} `json:"verifiable_addresses"`
	} `json:"identity"`
	IssuedAt string `json:"issued_at"`
}

// Upload defines model for Upload.
type Upload struct {
	Component string `json:"component"`
	File      string `json:"file"`
}

// CreateDisplayJSONBody defines parameters for CreateDisplay.
type CreateDisplayJSONBody PostDisplay

// UpdateDisplayJSONBody defines parameters for UpdateDisplay.
type UpdateDisplayJSONBody PatchDisplay

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody PostItem

// UpdateItemJSONBody defines parameters for UpdateItem.
type UpdateItemJSONBody PatchItem

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody PostUser

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody PatchUser

// CreateDisplayJSONRequestBody defines body for CreateDisplay for application/json ContentType.
type CreateDisplayJSONRequestBody CreateDisplayJSONBody

// Bind implements render.Binder.
func (CreateDisplayJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateDisplayJSONRequestBody defines body for UpdateDisplay for application/json ContentType.
type UpdateDisplayJSONRequestBody UpdateDisplayJSONBody

// Bind implements render.Binder.
func (UpdateDisplayJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody CreateItemJSONBody

// Bind implements render.Binder.
func (CreateItemJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateItemJSONRequestBody defines body for UpdateItem for application/json ContentType.
type UpdateItemJSONRequestBody UpdateItemJSONBody

// Bind implements render.Binder.
func (UpdateItemJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// Bind implements render.Binder.
func (CreateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// Bind implements render.Binder.
func (UpdateUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// MeJSON200Response is a constructor method for a Me response.
// A *Response is returned with the configured status code and content type from the spec.
func MeJSON200Response(body Session) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// MeJSONDefaultResponse is a constructor method for a Me response.
// A *Response is returned with the configured status code and content type from the spec.
func MeJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UploadFileJSON200Response is a constructor method for a UploadFile response.
// A *Response is returned with the configured status code and content type from the spec.
func UploadFileJSON200Response(body string) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UploadFileJSONDefaultResponse is a constructor method for a UploadFile response.
// A *Response is returned with the configured status code and content type from the spec.
func UploadFileJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateDisplayJSON200Response is a constructor method for a CreateDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateDisplayJSON200Response(body int64) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateDisplayJSONDefaultResponse is a constructor method for a CreateDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateDisplayJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeleteDisplayJSONDefaultResponse is a constructor method for a DeleteDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteDisplayJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetDisplayJSON200Response is a constructor method for a GetDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func GetDisplayJSON200Response(body GetDisplay) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetDisplayJSONDefaultResponse is a constructor method for a GetDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func GetDisplayJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateDisplayJSON200Response is a constructor method for a UpdateDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateDisplayJSON200Response(body GetDisplay) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateDisplayJSONDefaultResponse is a constructor method for a UpdateDisplay response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateDisplayJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateItemJSON200Response is a constructor method for a CreateItem response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateItemJSON200Response(body GetItem) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateItemJSONDefaultResponse is a constructor method for a CreateItem response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateItemJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeleteItemJSONDefaultResponse is a constructor method for a DeleteItem response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteItemJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetItemJSON200Response is a constructor method for a GetItem response.
// A *Response is returned with the configured status code and content type from the spec.
func GetItemJSON200Response(body GetItem) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetItemJSONDefaultResponse is a constructor method for a GetItem response.
// A *Response is returned with the configured status code and content type from the spec.
func GetItemJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateItemJSON200Response is a constructor method for a UpdateItem response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateItemJSON200Response(body GetItem) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateItemJSONDefaultResponse is a constructor method for a UpdateItem response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateItemJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// CreateUserJSONDefaultResponse is a constructor method for a CreateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func CreateUserJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUserJSON200Response is a constructor method for a GetUser response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUserJSON200Response(body GetUser) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GetUserJSONDefaultResponse is a constructor method for a GetUser response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUserJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateUserJSON200Response is a constructor method for a UpdateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateUserJSON200Response(body GetUser) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdateUserJSONDefaultResponse is a constructor method for a UpdateUser response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdateUserJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Session
	// (GET /@me)
	Me(w http.ResponseWriter, r *http.Request) *Response
	// Upload file
	// (POST /assets)
	UploadFile(w http.ResponseWriter, r *http.Request) *Response
	// Create display
	// (POST /d)
	CreateDisplay(w http.ResponseWriter, r *http.Request) *Response
	// Delete display
	// (DELETE /d/{displayID})
	DeleteDisplay(w http.ResponseWriter, r *http.Request, displayID int64) *Response
	// Get display
	// (GET /d/{displayID})
	GetDisplay(w http.ResponseWriter, r *http.Request, displayID int64) *Response
	// Update display
	// (PATCH /d/{displayID})
	UpdateDisplay(w http.ResponseWriter, r *http.Request, displayID int64) *Response
	// Create Item
	// (POST /i)
	CreateItem(w http.ResponseWriter, r *http.Request) *Response
	// Delete item
	// (DELETE /i/{itemID})
	DeleteItem(w http.ResponseWriter, r *http.Request, itemID int64) *Response
	// Get item
	// (GET /i/{itemID})
	GetItem(w http.ResponseWriter, r *http.Request, itemID int64) *Response
	// Update item
	// (PATCH /i/{itemID})
	UpdateItem(w http.ResponseWriter, r *http.Request, itemID int64) *Response
	// Create user
	// (POST /u)
	CreateUser(w http.ResponseWriter, r *http.Request) *Response
	// Get user
	// (GET /u/{username})
	GetUser(w http.ResponseWriter, r *http.Request, username string) *Response
	// Update user
	// (PATCH /u/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Me operation middleware
func (siw *ServerInterfaceWrapper) Me(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Me(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UploadFile(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateDisplay operation middleware
func (siw *ServerInterfaceWrapper) CreateDisplay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateDisplay(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteDisplay operation middleware
func (siw *ServerInterfaceWrapper) DeleteDisplay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "displayID" -------------
	var displayID int64

	if err := runtime.BindStyledParameter("simple", false, "displayID", chi.URLParam(r, "displayID"), &displayID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "displayID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteDisplay(w, r, displayID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetDisplay operation middleware
func (siw *ServerInterfaceWrapper) GetDisplay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "displayID" -------------
	var displayID int64

	if err := runtime.BindStyledParameter("simple", false, "displayID", chi.URLParam(r, "displayID"), &displayID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "displayID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetDisplay(w, r, displayID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateDisplay operation middleware
func (siw *ServerInterfaceWrapper) UpdateDisplay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "displayID" -------------
	var displayID int64

	if err := runtime.BindStyledParameter("simple", false, "displayID", chi.URLParam(r, "displayID"), &displayID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "displayID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateDisplay(w, r, displayID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateItem(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "itemID" -------------
	var itemID int64

	if err := runtime.BindStyledParameter("simple", false, "itemID", chi.URLParam(r, "itemID"), &itemID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "itemID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteItem(w, r, itemID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetItem operation middleware
func (siw *ServerInterfaceWrapper) GetItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "itemID" -------------
	var itemID int64

	if err := runtime.BindStyledParameter("simple", false, "itemID", chi.URLParam(r, "itemID"), &itemID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "itemID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetItem(w, r, itemID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "itemID" -------------
	var itemID int64

	if err := runtime.BindStyledParameter("simple", false, "itemID", chi.URLParam(r, "itemID"), &itemID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "itemID"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateItem(w, r, itemID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "username" -------------
	var username string

	if err := runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "username"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUser(w, r, username)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "username" -------------
	var username string

	if err := runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "username"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdateUser(w, r, username)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/@me", wrapper.Me)
		r.Post("/assets", wrapper.UploadFile)
		r.Post("/d", wrapper.CreateDisplay)
		r.Delete("/d/{displayID}", wrapper.DeleteDisplay)
		r.Get("/d/{displayID}", wrapper.GetDisplay)
		r.Patch("/d/{displayID}", wrapper.UpdateDisplay)
		r.Post("/i", wrapper.CreateItem)
		r.Delete("/i/{itemID}", wrapper.DeleteItem)
		r.Get("/i/{itemID}", wrapper.GetItem)
		r.Patch("/i/{itemID}", wrapper.UpdateItem)
		r.Post("/u", wrapper.CreateUser)
		r.Get("/u/{username}", wrapper.GetUser)
		r.Patch("/u/{username}", wrapper.UpdateUser)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaUXOjNhD+K4zaR2rcJNMHntq79DqZptdM2jzdZDxrtDa6AuIk4cb1+L93hMCALdnY",
	"CRe3d0/BIFa73/ftLixZkYinOc8wU5KEKyKjGFMoD38Wggt9AJQyxXgGyZ3gOQrFUJJwBolEn+StU9oY",
	"Rf13xkUKioSEZerygvhELXM0P3GOgqx9kqKUMC9XVxelEiybk/XaJwI/FUwgJeEHY7NZ/7gxxqcfMVLa",
	"1i+orpnME1ge6S9FGQmW69UWR3zC6HY0P1xZo2EK05vr0qY+lD1vq86AELDUv/OYK/5wf2t1RjGVoPVK",
	"IVFkkPYAk1HSWl7b9DtAtNxoAnPAfqMwPRZzw9TNdU+M8Elpd5Nblv31PJL2oit5xCC541I5NzoS5o7j",
	"Oxt0UG4x0sDjgPxBojgV8mcLdMaEVO/tGBzBRAJ7rPSgSSPYjWU3W7Y8Pz1HmphbjvttUDtctj20UXgH",
	"KoqHKVeuCrF2uXFC+h5Mx+dlmdPVE2S/X6x7NTiQzHZD41J9di20xW5rAI8OR4dQSx9BtP3dX1RdnvcS",
	"TwdRInDOpBJQt8SXUlb/OnSoBNmC/QOlrBTR9RgixRbtTaecJwiZvgkKFWOmWAQK6USXbovfrUWMZ5MU",
	"VcxpNzm2nwXTPME9Fo2JwzhU6/yuRVv028nY8pmLCUhZCMginCS4wMTqEz7lTKB0ucyo47TeRS0tIAjc",
	"B6rDnsCIL1AsJ0CpQClxL84nbVHkdN9dC0gKu34XDHq2UGPD3OG33ezs3odH81YycYRSXS2EnVKpQKH7",
	"yiSKIZu7kVACmLLAjikw+4Z/41Qy1SPB64V+ZcwGxSGeULAZg2mCA2pF41TIF5ZR6ThSe0U6QWS1vVpv",
	"ldPPEZ5tv0aKHeHVMrOIaiMhB1vWdD/ObSZl4SLBFkTVDDrlztIGDhVQZ1Noe9SqjjbXH/KEAz16zFDN",
	"LKzSmrGkO4SYsgzEsnkRcQ4aaquVjV1/9S0sm/GdBzDyZ8ykx6SnYvTyYpqwyPvp7sabceG9gwgojjZv",
	"2yExZ4wgTLsm49F49L32nueYQc5ISC5H49GFfvQAFZdhBz+ax4Y5loFrRErcbygJyW9YKknmPKtqwMV4",
	"bMDKVAUV5HlScRV8lOYxwYhYH30rcEZC8k3QjISCah4U1M8VJQLdyH//lZTnZlAk6sU2NNMny3YPGT7l",
	"GCmkXr3GJ7JIU01xqF+QvcZZnwQgJVb1m0sLbkaA71hi8PtUoFRvOF1uRZIWiWI5CBVoWX1HQUH/YCqR",
	"r7uKU6LA9TM528Lm/rZUHEthjha9nzl3BiavzL2SO+qm7W1ZHutXp33MnR5H++VsAO4OzklcfF2ZjbqX",
	"3gD17g0I58Sp4cmjGxg1rcFqMzxZm0j0Y/0uydfl+YbkHASkqFBIEn5YEab319WR+MS8UrWmZ9ts+Uch",
	"/7jD7dUu5O+597bC9owQN6A1iPv2ftGamb8usC/XpFoh/Sf6VIuiHFQU25oThVdMgAFKanv4OUBN/b/I",
	"wxDfLZvsUDcs53PDtcLS/OfnrNn2nAmr+lzlrGYrWJlvZz06XEXc4ew2FocpweeMbtXTWImuu6GdBY5f",
	"lu51H6tp2dvEXoGbgdrX1zp4uHGxTR0sDnWt8tvMcF2rNN+Lratzr4JVjylMRBrbYFV/JFo7B0P1vwz0",
	"yb3WJyd39qXwdIvZXMUkvBj7JGVZ/fNyd+QwcJFs2D33ImlYO1AkX5uogSpm/xz8AsVRVcxi46xEsaip",
	"Lz9qkVipXIZBMDOT5AhEjhTxnxHjwWJM1o/rfwMAAP//eHxg4MgnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
